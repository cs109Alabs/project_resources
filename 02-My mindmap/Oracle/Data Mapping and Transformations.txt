Data Mapping and Transformations

Data Selection 

WHERE Clause

MAP sales.tcustord, TARGET sales.tord,
WHERE (PRODUCT_AMOUNT > 10000);
MAP sales.tcustord, TARGET sales.tord,
WHERE (PRODUCT_TYPE = “AUTO”);

Arithmetic operators and floating-point data types are not supported by WHERE

on either the MAP or TABLE parameter 

FILTER Clause

on either the MAP or TABLE parameter 

complex operation than where

example

FILTER ((PRODUCT_PRICE*PRODUCT_AMOUNT)>10000);

FILTER (@STRFIND(NAME, "JOE")>0);

RANGE

Divides workload into multiple, randomly distributed groups of data

Syntax 

@RANGE (<my range>, <total ranges>      [, <column> [, ...]])


example

Replicat #1

MAP SALES.ACCOUNT,TARGET SALES.ACCOUNT, FILTER (@RANGE (1,3));

Replicat #2

MAP SALES.ACCOUNT, TARGET SALES.ACCOUNT, FILTER (@RANGE (2,3));

Replicat #3

MAP SALES.ACCOUNT, TARGET SALES.ACCOUNT, FILTER (@RANGE (3,3)); 

Column Mapping


COLMAP 

MAP HR.CONTACT, TARGET HR.PHONE,
COLMAP (USEDEFAULTS,
NAME = CUST_NAME,
PHONE_NUMBER = @STRCAT( “(”, AREA_CODE, “)”, 
PH_PREFIX, “-”, PH_NUMBER ) ); 


Building History

INSERTALLRECORDS 

INSERTALLRECORDS causes Replicat to insert every change operation made to a record as a new record in the database. The initial insert and subsequent updates and deletes are maintained as point-in-time snapshots.


INSERTALLRECORDS
MAP SALES.ACCOUNT, TARGET REPORT.ACCTHISTORY,
	COLMAP (USEDEFAULTS,
	TRAN_TIME = 		@GETENV(“GGHEADER”,”COMMITTIMESTAMP”),
	OP_TYPE = @GETENV(“GGHEADER”, “OPTYPE”),
	BEFORE_AFTER_IND = 
	@GETENV(“GGHEADER”,“BEFOREAFTERINDICATOR”));

Functions

Data Transformation

Example

MAP SALES.ACCOUNT, TARGET REPORT.ACCOUNT,
COLMAP ( USEDEFAULTS,
		TRANSACTION_DATE = @DATE (“YYYY-MM-DD”,
						“YY”, YEAR,
						“MM”, MONTH,
						“DD”, DAY),
		AREA_CODE    = @STREXT (PHONE-NO, 1, 3),
		PHONE_PREFIX = @STREXT (PHONE-NO, 4, 6),
		PHONE_NUMBER = @STREXT (PHONE-NO, 7, 10) ); 


@STREXT 

extract portions of a string field 

AREA_CODE    = @STREXT (PHONE-NO, 1, 3),

GETENV

Returns information on the GoldenGate environment

TOKEN

Maps environmental values that are stored in the user token area to the target column

GETVAL

Extracts parameters from a stored procedure as input to a FILTER or COLMAP clause.

SQLEXEC

enabling Extract and Replicat to communicate with the application database through SQL queries or run stored procedures

example

Using with Lookup Stored Procedure

CREATE OR REPLACE PROCEDURE LOOKUP
	(CODE_PARAM IN VARCHAR2, DESC_PARAM OUT VARCHAR2)
BEGIN
	SELECT DESC_COL INTO DESC_PARAM
	FROM LOOKUP_TABLE
	WHERE CODE_COL = CODE_PARAM;
END; 


Replicat parameter file

MAP HR.ACCOUNT, TARGET HR.NEWACCT,
	SQLEXEC (spname lookup, 
           params (code_param = account_code)),
	COLMAP  (USEDEFAULTS, newacct_id = account_id,
		       newacct_val = @GETVAL(lookup.desc_param)); 


SQLEXEC – Using with SQL Query

SQLEXEC (id lookup,
     query “select desc_param from lookup_table 
			where code_col = :code_param”,
			params (code_param = account_code)),
	COLMAP (USEDEFAULTS, newacct_id = account_id,
		newacct_val = @GETVAL(lookup.desc_param)); 


Macros

Macros can be defined in the parameter file or included in a macro file

Macros enable easier and more efficient building of parameters:


macros work with the following parameter files

Manager

extract

replicate

examples

EXTRACT EXSALES
MACRO #make_date
PARAMS (#year, #month, #day)
BEGIN
 @DATE(“YYYY-MM-DD”, “CC”, @IF(#year < 50, 20, 19), 
       	“YY”, #year, “MM”, #month, “DD”, #day)
END;
 
MAP SALES.ACCT, TARGET REPORT.ACCOUNT,
COLMAP
(	TARGETCOL1 = SOURCECOL1,
	Order_Date = #make_date(Order_YR,Order_MO,Order_DAY),
	Ship_Date  = #make_date(Ship_YR,Ship_MO,Ship_DAY)
 ); 


Consolidating Multiple Parameters:

Define the macro

MACRO #option_defaults
BEGIN
GETINSERTS
GETUPDATES
GETDELETES
INSERTDELETES
END;

Invoke the macro

#option_defaults ()
IGNOREUPDATES
MAP SALES.SRCTAB, TARGET SALES.TARGTAB;
#option_defaults ()
MAP SALES.SRCTAB2, TARGET SALES.TARGTAB2;

Libraries

Macros can be built in a library and referenced into your parameter file

EXTRACT EXTACCT
INCLUDE /ggs/dirprm/macro.lib

Expansion

enables tracing of macro expansion for debugging purposes 

CMDTRACE [ ON | OFF | DETAIL ]

EXTRACT EXTACCT
INCLUDE /ggs/dirprm/macro.lib
CMDTRACE ON
MAP SALES.ACCOUNT, TARGET REPORT.ACCOUNT_HISTORY,
COLMAP (USEDEFAULTS, #maptranfields () );                


User Tokens

store environmental values in the user token area of the GoldenGate record header

Store token values through a TABLE TOKENS clause and @GETENV functions

TABLE SALES.PRODUCT, TOKENS (TKN1 = @GETENV(“GGENVIRONMENT",“OSUSERNAME"), TKN2 = @GETENV(“GGHEADER",“COMMITTIMESTAMP") );


Use token values to populate target columns through a MAP COLMAP clause and @TOKEN functions

MAP SALES.PRODUCT, TARGET SALES.PRODUCT_HISTORY,COLMAP (USEDEFAULTS, OSUSER = @TOKEN(“TKN1"), TRANSTIME = @TOKEN(“TKN2") ); 


Environmental Values Available 

Setting

EXTRACT EXTDEMOTABLE SALES.PRODUCT, TOKENS (TKN-OSUSER		= @GETENV (“GGENVIRONMENT",“OSUSERNAME"), TKN-DOMAIN		= @GETENV (“GGENVIRONMENT",“DOMAINNAME"), TKN-COMMIT-TS 	= @GETENV (“GGHEADER", “COMMITTIMESTAMP"), TKN-BA-IND 		= @GETENV(“GGHEADER",“BEFOREAFTERINDICATOR), TKN-TABLE		= @GETENV (“GGHEADER", “TABLENAME"), TKN-OP-TYPE 	= @GETENV (“GGHEADER", “OPTYPE"), TKN-LENGTH		= @GETENV (“GGHEADER", “RECORDLENGTH"), TKN-DB-VER		= @GETENV (“DBENVIRONMENT", “DBVERSION")); 


Using

MAP SALES.ORDER, TARGET REPORT.ORDER_HISTORY,
COLMAP (USEDEFAULTS,
TKN_NUMRECS  = @TOKEN ("TKN-NUMRECS");

MAP SALES.CUSTOMER, TARGET REPORT.CUSTOMER_HISTORY, 
COLMAP (USEDEFAULTS,
TRAN_TIME 	     = @TOKEN ("TKN-COMMIT-TS"),
OP_TYPE		     = @TOKEN (“TKN-OP-TYPE”), 
BEFORE_AFTER_IND = @TOKEN (“TKN-BA-IND”),
TKN_ROWID 		 = @TOKEN ("TKN-ROWID"));
