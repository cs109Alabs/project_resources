<?xml version="1.0" encoding="UTF-8" standalone="no"?><map version="0.8.1"><node CREATED="1479984765314" ID="55s2pf2ollnp3hla4mcdufd690" MODIFIED="1479984765314" TEXT="Python"><node CREATED="1479984765314" ID="2p26ifhftk5uchbkdsos5voc2r" MODIFIED="1479984765314" POSITION="right" TEXT="Pandas"><node CREATED="1479984765314" ID="3mse7k7bhdl50eha2flvi07odc" MODIFIED="1479984765314" TEXT="import"><node COLOR="#038003" CREATED="1479984765315" ID="0jagbijp3tnig43ip02bcgspvh" MODIFIED="1479984765315" TEXT="import pandas as pd"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node><node CREATED="1479984765315" ID="0pfgebgbr5h0l1lsu17kto9snl" MODIFIED="1479984765315" TEXT="Working with Column"><node CREATED="1479984765315" ID="5nubug2rg6biu8iu39ruu120rl" MODIFIED="1479984765315" TEXT="get unique value"><node CREATED="1479984765315" ID="2cnp6q4a4g8blje3d95uam2fl4" MODIFIED="1479984765315" TEXT="df.columnname.unique()"/></node><node CREATED="1479984765315" ID="793pe30sek7mcl3mkf873rofcf" MODIFIED="1479984765315" TEXT="drop column"><node CREATED="1479984765315" ID="64ja0tildvai2qc31js9su5u56" MODIFIED="1479984765315" TEXT="df.drop('quality',1)"/></node><node CREATED="1479984765315" ID="7s3hpv75ekh4b04567gah2rifi" MODIFIED="1479984765315" TEXT="get column index"><node COLOR="#038003" CREATED="1479984765315" ID="0den2l02jj9h0q57pm9uqfj74u" MODIFIED="1479984765315" TEXT="index1 = dataframe.columns.get_loc(&quot;my_column_name&quot;)"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node><node CREATED="1479984765315" ID="345rii438lujjll3u82vii0mf3" MODIFIED="1479984765315" TEXT="reference column by index"><node COLOR="#038003" CREATED="1479984765315" ID="1cale7daj9q9mu7tj82f76qolm" MODIFIED="1479984765315" TEXT="dataframe.iloc[:, index1]"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node><node CREATED="1479984765315" ID="2dq262suctom52gaj89ni1hjk7" MODIFIED="1479984765315" TEXT="reference column by name"><node CREATED="1479984765315" ID="675kde56i3q2clpn8re584vane" MODIFIED="1479984765315" TEXT="dataframe['my_column_name']"/></node><node CREATED="1479984765315" ID="28h0uvaih9m805bd90e4c901ta" MODIFIED="1479984765315" TEXT="change column type "><node CREATED="1479984765315" ID="3cth9rcp2afc8v80qrv522uf8i" MODIFIED="1479984765315" TEXT="data[feature_name].astype(float)"><hook NAME="accessories/plugins/NodeNote.properties"><text>data = pd.read_csv('datasets/hw4_dataset_4.txt', low_memory=False)  # low memory is set false for better type inference
data.head()
# STEP 2: Clean the data

# Categoricals will be int or str (object), the rest float

# List of columns to be converted to floating point
to_float = ['HIT', 'MALEMILI', 'MALEVET', 'VIETVETS', 'WWIIVETS', 'LOCALGOV', 'STATEGOV', 'FEDGOV', 'NUMPRM12', 
           'CARDPM12', 'CARDPROM', 'NUMPROM', 'NGIFTALL', 'CARDGIFT']

# Converted columns to floating point
for feature_name in to_float:
    data[feature_name] = data[feature_name].astype(float)

# Columns between POP901 to AC2 should all be float
index1 = data.columns.get_loc("POP901")
index2 = data.columns.get_loc("AC2")

for i in range(index1, index2 + 1):
    data.iloc[:, i] = data.iloc[:, i].astype(float)</text></hook></node><node CREATED="1479984765316" ID="3km2froo1tj084g1q11a5qdvgp" MODIFIED="1479984765316" TEXT="data.iloc[:, i] = data.iloc[:, i].astype(float)"/></node><node CREATED="1479984765316" ID="3nh4paoochrvvbomhb8b5nb9pq" MODIFIED="1479984765316" TEXT="remove all columns with null ot _ values"><node CREATED="1479984765316" ID="03misj84h3cp72rfv2nsal8mab" MODIFIED="1479984765316" TEXT="# replace  _ by np,nan&#13;&#10;data = data.replace('_',np.nan)&#13;&#10;# remove all column which have np.nan&#13;&#10;for column in data.columns:&#13;&#10;    if len(data[column][data[column].isnull()])&lt;&gt;0 :&#13;&#10;       data.drop(column,axis=1,inplace=True)&#13;&#10;&#13;&#10;data.head()  "/></node></node><node CREATED="1479984765316" FOLDER="true" ID="2ng1g4p9msvdc82reb0r0naspk" MODIFIED="1479984765316" TEXT="series"><node CREATED="1479984765316" ID="5jl4p29gsoapucmnngu711f96p" MODIFIED="1479984765316" TEXT="create"><node COLOR="#038003" CREATED="1479984765316" ID="0vcfsigtivhjl5abo2mliekggp" MODIFIED="1479984765316" TEXT="series1 = pd.Series([1,2,3,4])"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node><node CREATED="1479984765316" ID="592i8b428gi9l1cn7ja3nua9uj" MODIFIED="1479984765316" TEXT="convert list into pandas series"><node COLOR="#038003" CREATED="1479984765316" ID="1hlc8f2fd834ka2mi827jn3muj" MODIFIED="1479984765316" TEXT="list1  = [ ]&#13;&#10;for  loop &#13;&#10;    list1.append(i)&#13;&#10;&#13;&#10;series2= pd.Series(list1)"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node></node></node><node CREATED="1479984765316" FOLDER="true" ID="33pid3jivgndtdid3ha15eiuec" MODIFIED="1479984765316" TEXT=".apply"><node CREATED="1479984765316" ID="3vrlektoadape9a8h8v6g0589s" MODIFIED="1479984765316" TEXT="apply a function to every element in the series/data frame"/><node CREATED="1479984765316" ID="62fbsl46sv7notrja3asavm92v" MODIFIED="1479984765316" TEXT="series1.apply(lamdba x: x+1)"/></node><node CREATED="1479984765316" FOLDER="true" ID="2jgcfk13bnqn4qo9e6d5ova4l9" MODIFIED="1479984765316" TEXT="data frame"><node CREATED="1479984765318" ID="7mt41vqo0u4h9uk7ouh699gkej" MODIFIED="1479984765318" TEXT="select one column and store it in pandas series"><node COLOR="#038003" CREATED="1479984765318" ID="5fsurkhca8a90779u66n27dslf" MODIFIED="1479984765318" TEXT="outcomes = full_data['Survived']"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node><node CREATED="1479984765318" ID="4r56i6oflq6glud9j0skbphbc4" MODIFIED="1479984765318" TEXT="Loop across dataframe"><node CREATED="1479984765318" ID="5rk7d3sla7vksfgnfdc594s0b1" MODIFIED="1479984765318" TEXT="iterate over all rows"><node COLOR="#038003" CREATED="1479984765318" ID="4jgjqdshtqaupknf2bqj32me6d" MODIFIED="1479984765318" TEXT="for i, passenger in data.iterrows():"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node><node CREATED="1479984765318" ID="1nted4diegabb3d4jjnptkakj6" MODIFIED="1479984765318" TEXT="Iterate over all columns"><node COLOR="#038003" CREATED="1479984765318" ID="5vdoeql1jsiberk5cu77jrab25" MODIFIED="1479984765318" TEXT="for column in x_df.columns:"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node></node><node CREATED="1479984765318" ID="1djvi9e5lugrn2otolku9i6g66" MODIFIED="1479984765318" TEXT="Create empty data frame"><node COLOR="#038003" CREATED="1479984765318" ID="6dj9cdibgcug367dupr31gkjb0" MODIFIED="1479984765318" TEXT="x_df_expanded = pd.DataFrame({}) "><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node><node CREATED="1479984765318" ID="0vrhmeag6ns5pa55up2tdcbs6l" MODIFIED="1479984765318" TEXT="Work with Columns"><node CREATED="1479984765318" ID="3p89d8ju3fhsgi8eteh8c89ulk" MODIFIED="1479984765318" TEXT="Drop one column"><node COLOR="#038003" CREATED="1479984765318" ID="6630orvsermmt40iojdjogrp7k" MODIFIED="1479984765318" TEXT="data = full_data.drop('Survived', axis = 1)"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node><node CREATED="1479984765318" ID="681698lmbsr4o9qcuh9e1el9k7" MODIFIED="1479984765318" TEXT="Get column unique values"><node COLOR="#038003" CREATED="1479984765318" ID="4ggh4187ci5hv51tukmjacinoe" MODIFIED="1479984765318" TEXT="x_df[column].unique()"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node><node CREATED="1479984765318" ID="7q7nrr3dmd563trektqhfkkq1q" MODIFIED="1479984765318" TEXT="Get Column type"><node COLOR="#038003" CREATED="1479984765318" ID="6rae9la807qjaqbtvha7pdkqpo" MODIFIED="1479984765318" TEXT="x_df[column].dtype"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node><node CREATED="1479984765318" ID="1nhghp2u8clfnq9p3vtmtrj5tt" MODIFIED="1479984765318" TEXT="Get number of items in the column"><node COLOR="#038003" CREATED="1479984765318" ID="6nj656bpajd03cg3meotio3css" MODIFIED="1479984765318" TEXT="len(x_df[column])"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node><node CREATED="1479984765318" ID="4a6irkpsdq1bitpjhjtpd16i52" MODIFIED="1479984765318" TEXT="len(x_df[column].unique())"/><node CREATED="1479984765318" ID="2crq70gpckn67mtnbir6pv8l3l" MODIFIED="1479984765318" TEXT="df['quality'].count()"/></node><node CREATED="1479984765318" ID="6n4hhglnh1v4i9a4semclotjel" MODIFIED="1479984765318" TEXT="get column values into numpy array"><node CREATED="1479984765318" ID="1pfugc4vpd7n83o132ik3f55rt" MODIFIED="1479984765319" TEXT="Y=df['quailty'].values"/></node><node CREATED="1479984765319" ID="4p19ulihn9k1bth03q23jb5ab3" MODIFIED="1479984765319" TEXT="get column value count"><node CREATED="1479984765319" ID="7gqo64ks2aln0u696lo9gjjo6h" MODIFIED="1479984765319" TEXT="print df['quality'].value_counts()"/></node><node CREATED="1479984765319" ID="5cilpiq4d6pub38t2prau55cp6" MODIFIED="1479984765319" TEXT="get column names"><node CREATED="1479984765319" ID="4fo10t2o4kho81l1krnvtt00vc" MODIFIED="1479984765319" TEXT="df.columns.values"/></node></node></node><node CREATED="1479984765319" ID="1gbpb69hisbsf5m9d1mrure5i2" MODIFIED="1479984765319" TEXT="get_dummies"><node CREATED="1479984765319" ID="4djr8f9aqe5pn4fsh2n346ebhk" MODIFIED="1479984765319" TEXT="convert categorical column to data frame with dummy variables"/><node COLOR="#038003" CREATED="1479984765319" ID="30ejcgf1ltal5607l3jlngtcn9" MODIFIED="1479984765319" TEXT="encoding = pd.get_dummies(x_df[column])"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node><node CREATED="1479984765319" FOLDER="true" ID="3nakcr9cdum6aasa39mffsjei5" MODIFIED="1479984765319" TEXT="Concatenate"><node CREATED="1479984765319" ID="28nhd3i58u16vlq909ibrb20pk" MODIFIED="1479984765319" TEXT="Dataframe"><node CREATED="1479984765319" ID="4ud5drof6tq7ndj7o6r9rearjj" MODIFIED="1479984765319" TEXT="column"><node COLOR="#038003" CREATED="1479984765319" ID="7i6om6ko08a8d8fih4iqah7cmf" MODIFIED="1479984765319" TEXT="x_df_expanded = pd.concat([x_df_expanded, x_df[[column]]], axis=1)"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node><node CREATED="1479984765319" ID="63kjoem4nbpe1qecc1unpd2kjv" MODIFIED="1479984765319" TEXT="x_df[[column]]]  convert the column to dataframe with one column"/></node><node CREATED="1479984765319" ID="4cggtpcio8hducalq6b99g60e3" MODIFIED="1479984765319" TEXT="Data frame"><node COLOR="#038003" CREATED="1479984765319" ID="5l8de5t8mv782958v5mh2lo797" MODIFIED="1479984765319" TEXT="x_df_expanded = pd.concat([x_df_expanded, encoding], axis=1)"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node></node></node><node CREATED="1479984765319" ID="6h4gekjv74d2ubuvbhse64pc5f" MODIFIED="1479984765319" TEXT="Convert"><node CREATED="1479984765319" ID="242iklqie7ldrcu8g15q21lb56" MODIFIED="1479984765319" TEXT="Column "><node CREATED="1479984765319" ID="0mkul40b23c6i29uohu2at37l6" MODIFIED="1479984765319" TEXT="to"><node CREATED="1479984765319" ID="34541vlt1gatt71l44pmudfch4" MODIFIED="1479984765319" TEXT="Series"><node CREATED="1479984765319" ID="225lagvkpie9q83fquiesmf3d9" MODIFIED="1479984765319" TEXT="xx =      x_df['horsepower']"/></node><node CREATED="1479984765319" ID="5idgtkmhe628v10kcu4dgvm106" MODIFIED="1479984765319" TEXT="Dataframe"><node CREATED="1479984765319" ID="59v2uc4r658g0h2t9rnplvmu40" MODIFIED="1479984765319" TEXT="xx =      x_df[['horsepower']]"/></node><node CREATED="1479984765319" ID="29huc9p3deibdscsgjptv4cor4" MODIFIED="1479984765319" TEXT="numpy array"><node CREATED="1479984765319" ID="5m11obr5qv78047gdvbfou04hl" MODIFIED="1479984765319" TEXT="y_data = df['y'].values"/></node></node></node><node CREATED="1479984765319" ID="7c3b582qfhcr750gebr359c4tt" MODIFIED="1479984765319" TEXT="Data frame"><node CREATED="1479984765319" ID="0kt4q0sfe2njmghkt2g72mhnc7" MODIFIED="1479984765319" TEXT="to"><node CREATED="1479984765319" ID="7jsofkhrp806aho7vr00tflu9j" MODIFIED="1479984765319" TEXT="numpy array"><node CREATED="1479984765319" ID="2q3ihv785b057khk1u7g43558j" MODIFIED="1479984765319" TEXT="x = x_df_expanded.values"/><node CREATED="1479984765319" ID="4ha7q9vgbabmnmme9ubp5b8m9i" MODIFIED="1479984765319" TEXT="X = df_tmp.as_matrix()"/></node></node></node><node CREATED="1479984765319" ID="1k2igjabspm48620nvreqf9uft" MODIFIED="1479984765319" TEXT="selected columns"><node CREATED="1479984765319" ID="02p289fv25vg36gn8a7qbl6n49" MODIFIED="1479984765319" TEXT="to"><node CREATED="1479984765319" ID="2ug726gphamuiup3tl2jd4664u" MODIFIED="1479984765319" TEXT="numpy array"><node CREATED="1479984765319" ID="078bome7m7k2i7ge3n3nbeqa4f" MODIFIED="1479984765319" TEXT="n= data_main[['n390','n291','n392']].values"/></node></node></node></node><node CREATED="1479984765319" ID="68hqn1604deu4vv5tilko79ivu" MODIFIED="1479984765320" TEXT="useful handel"><node CREATED="1479984765320" ID="5507e4k0hf5qj21r22vrkv2g9u" MODIFIED="1479984765320" TEXT="shuffle the data in dataframe"><node CREATED="1479984765320" ID="38fr4jkamtv0vojnvh0kdpapmi" MODIFIED="1479984765320" TEXT="nfldata = nfldata.reindex(np.random.permutation(nfldata.index))"/></node><node CREATED="1479984765320" ID="37efu10tom2o6nb2lakt603lf4" MODIFIED="1479984765320" TEXT="Get sample N point form dataframe"><node CREATED="1479984765320" ID="2ak18jkj5c5ps2ravdsq9lnd52" MODIFIED="1479984765320" TEXT="nfldata = nfldata.reindex(np.random.permutation(nfldata.index))&#13;&#10;N = 500&#13;&#10;nfldata_sm = nfldata.sample(N)"/></node></node></node><node CREATED="1479984765320" ID="5ke803n801m7qg6dv38na34p5b" MODIFIED="1479984765320" POSITION="right" TEXT="Numpy"><node CREATED="1479984765320" ID="05jhqdpkoot7u04jbaklp5hetf" MODIFIED="1479984765320" TEXT="import "><node COLOR="#038003" CREATED="1479984765320" ID="3hn4nhubb2mv4j1lghp01cf0oe" MODIFIED="1479984765320" TEXT="import Numpy as np"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node><node COLOR="#038003" CREATED="1479984765320" ID="37leigpek0iacvp8pqudoa3e6n" MODIFIED="1479984765320" TEXT="beta0_hat_a =np.zeros(np.size(Na))"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node><node CREATED="1479984765320" ID="3b1m2lb5h9o5ri9inthp7fo3po" MODIFIED="1479984765320" TEXT="np.random"><node CREATED="1479984765320" ID="74pul5o8htsv3c3m61dbe9fk9j" MODIFIED="1479984765320" TEXT="uniform"><node COLOR="#038003" CREATED="1479984765320" ID="20e5pk2p29qo1s7bmhk6fqsk17" MODIFIED="1479984765320" TEXT="x = np.random.uniform(0, 1, size=10000)"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node><node CREATED="1479984765320" ID="6cc7kvtcti6mk2n6i6knepi7i4" MODIFIED="1479984765320" TEXT="beta"><node COLOR="#038003" CREATED="1479984765320" ID="4vhimkr88h3v2okatgb0q649fr" MODIFIED="1479984765320" TEXT="post_samples = np.random.beta(a + likes, b + ratings - likes, n_samples)"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node><node CREATED="1479984765320" ID="64duo9iffm26noq6omphpp8svv" MODIFIED="1479984765320" TEXT="normal"><node COLOR="#038003" CREATED="1479984765320" ID="5jei353j99qramhsntp05cin6p" MODIFIED="1479984765320" TEXT="x = np.random.normal(0, 1, size=10000)"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node><node CREATED="1479984765320" ID="0rfh2vfsm14cou5avd0gbtfpol" MODIFIED="1479984765320" TEXT="choice"><node CREATED="1479984765320" ID="45urkcr98oee7an5qujq7j9650" MODIFIED="1479984765320" TEXT="Randomly a sample points from the train set of size 'n'"/><node CREATED="1479984765320" ID="7trr1squ43q4lvcjdhcnav5me2" MODIFIED="1479984765320" TEXT="used in bootstaping"/><node COLOR="#038003" CREATED="1479984765320" ID="1she34jt302llnn4p4jd9noh0k" MODIFIED="1479984765320" TEXT="indices = np.random.choice(np.arange(0, n), size=n)&#13;&#10;&#13;&#10;x_train_sample = x_train[indices, :]&#13;&#10;y_train_sample = y_train[indices]"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node></node><node CREATED="1479984765320" ID="4jvo7gakbr0dobj33u1dtet0el" MODIFIED="1479984765320" TEXT="Create"><node CREATED="1479984765320" ID="0r02t5ao6jhlr830k17csd5db8" MODIFIED="1479984765320" TEXT="numpy with number between two values with out repetition "><node COLOR="#038003" CREATED="1479984765320" ID="7dmf8u96a83ihchhkdjg28i299" MODIFIED="1479984765320" TEXT="Na = np.linspace(1, 100, num=50)"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node><node CREATED="1479984765320" ID="69e1c4vkgs63pdeab655mejevt" MODIFIED="1479984765320" TEXT="odd numbers from 1 to 99"><node COLOR="#038003" CREATED="1479984765320" ID="4jn7j3bash6bj8gi0nkov5vc0e" MODIFIED="1479984765320" TEXT=" np.linspace(1, 99, num=50)"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node><node CREATED="1479984765320" ID="3kl0sl8gq7v4798s1cbgjnaikb" MODIFIED="1479984765320" TEXT="even number from 2 to 100"><node COLOR="#038003" CREATED="1479984765320" ID="63ndqpfj77aj8aihc4lqfmg9te" MODIFIED="1479984765320" TEXT=" np.linspace(2, 100, num=50)"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node><node CREATED="1479984765320" ID="4hb7aeh36g4ulp9n4l5nlr9fdj" MODIFIED="1479984765320" TEXT="numbers from 1 to 100"><node COLOR="#038003" CREATED="1479984765320" ID="22gos3to66628v8p8hnf17i4ul" MODIFIED="1479984765320" TEXT=" np.linspace(1, 100, num=100)"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node></node><node CREATED="1479984765320" ID="7jd2bq076sf3tu9t9a81le4839" MODIFIED="1479984765320" TEXT="numpy with numbers between two values with  repetition "><node COLOR="#038003" CREATED="1479984765320" ID="1k889briabv0i21diqjbtjn1l6" MODIFIED="1479984765320" TEXT="x = np.random.choice(np.arange(0, 10), size=10)"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node></node><node CREATED="1479984765320" ID="30pkkhcbrl9367vt63k6r1rlbs" MODIFIED="1479984765320" TEXT="numpy with one value m for n times"><node CREATED="1479984765320" ID="1agvekqop4hugmrf2mkv7pp52d" MODIFIED="1479984765320" TEXT="f =  np.array([11] * 22)"/><node CREATED="1479984765320" ID="26jvci295ok7ahe0u13rs0ge5t" MODIFIED="1479984765320" TEXT="numpy array with 22 items all equal 11"/></node></node><node CREATED="1479984765320" ID="5dgjtnhoiatqrjm1koqn3a19k1" MODIFIED="1479984765320" TEXT="np.exp"><node CREATED="1479984765321" ID="60dngfnqiup6ljlj0aq6ih393h" MODIFIED="1479984765321" TEXT="e"/><node CREATED="1479984765321" ID="6as26svqff76qi3n4e80hahlhg" MODIFIED="1479984765321" TEXT="y1 = np.exp(0+1*x)/(1+np.exp(0+1*x))"><node CREATED="1479984765321" ID="6mjtta5733o4llnvp7mer0dl53" MODIFIED="1479984765321" TEXT="&lt;html&gt;&lt;img src=&quot;images/21ibi3dtoue4vbiq0knju5dava.png&quot;&gt;"/></node></node><node CREATED="1479984765322" ID="5l0dktjilnas5tcthn76li8sgk" MODIFIED="1479984765322" TEXT="np.linspace"><node CREATED="1479984765323" ID="0bf1j5g38fovop8q7s6lj8usmj" MODIFIED="1479984765323" TEXT="np.linspace(-5, 5, 100)"/></node></node><node CREATED="1479984765323" ID="1l7or3ur044enb3u49qdqttau8" MODIFIED="1479984765323" POSITION="right" TEXT="matplotlib"><node CREATED="1479984765323" ID="0atok440ggmejjr74im3m5tv57" MODIFIED="1479984765323" TEXT="plt.figure(figsize=(20,10))&#13;&#10;plt.axhline (y=5,color='r',label='True beta1')&#13;&#10;plt.xlabel('Size of sample')&#13;&#10;plt.ylabel('beta_1')&#13;&#10;plt.legend((loc='best)&#13;&#10;plt.show()"/><node CREATED="1479984765323" ID="06ei07qdvdukktrf50fm1tlp6b" MODIFIED="1479984765323" TEXT="fig, ((ax1, ax2, ax3)) = plt.subplots(1, 3, figsize=(15, 5))"/><node CREATED="1479984765323" ID="2qnv4uppb635p7ve9g9cffp7c5" MODIFIED="1479984765323" TEXT="plt lower and upper limit"><node CREATED="1479984765323" ID="0is2ete9kg5710mantmjvqad79" MODIFIED="1479984765323" TEXT="plt.xlim(0,300)"/></node></node><node CREATED="1479984765323" ID="3t2udqp0cjenage6fej8fmtf1q" MODIFIED="1479984765323" POSITION="right" TEXT="interact"><node CREATED="1479984765323" ID="17gs61qdufft99vrojvc961r9s" MODIFIED="1479984765323" TEXT="from ipywidgets import interact, FloatSlider, RadioButtons"/></node><node CREATED="1479984765323" ID="6li948n0ta12mr97cr416gj7ha" MODIFIED="1479984765323" POSITION="left" TEXT="Code"><node CREATED="1479984765323" ID="7nt4di100pi4f8d3e3efnkdr6u" MODIFIED="1479984765323" TEXT="Split Data frame to train and test"><node CREATED="1479984765323" ID="77ocab9ec7sgqs3qfki82fbl8j" MODIFIED="1479984765323" TEXT="def split(data):&#13;&#10;    &#13;&#10;    #find the number of records dataframe&#13;&#10;    length = data.shape[0]&#13;&#10;    #build a list of integer indices for records in dataframe&#13;&#10;    indices = range(length)&#13;&#10;    #randomly shuffle the indices&#13;&#10;    np.random.shuffle(indices)&#13;&#10;    &#13;&#10;    #take 70% of the shuffled list of indices for training&#13;&#10;    train_indices = indices[0:int(length * .7)]&#13;&#10;    #take the remainder the shuffled list of indices for testing&#13;&#10;    test_indices = indices[int(length * .7):]&#13;&#10;    &#13;&#10;    #get the records for the training indices&#13;&#10;    train = data.iloc[train_indices]&#13;&#10;    #get the records for the testing indices&#13;&#10;    test = data.iloc[test_indices]&#13;&#10;    &#13;&#10;    return train, test"/><node CREATED="1479984765323" ID="5ebs4ovpktfgqu9q33cf1qhh2f" MODIFIED="1479984765323" TEXT="x_train, x_test, y_train, y_test = sk_split(x, y, test_size=0.30)"/><node CREATED="1479984765323" ID="5iqdsknmj6cor5q8c1jnnebi6i" MODIFIED="1479984765323" TEXT="shuffle the data"><node CREATED="1479984765323" ID="5bkkbrn7oj9sn6ehbfrqkfvckp" MODIFIED="1479984765323" TEXT="nfldata = nfldata.reindex(np.random.permutation(nfldata.index))"/></node><node CREATED="1479984765323" ID="74s51gkvbjjsf7pi8or71kc5fb" MODIFIED="1479984765323" TEXT="first 25% Train"><node CREATED="1479984765323" ID="15v4kkmf01490el2cdh88j7ats" MODIFIED="1479984765323" TEXT="# Convert data frame to numpy array&#13;&#10;x = x_df_expanded.values&#13;&#10;y = y_df.values&#13;&#10;&#13;&#10;# Split data into train and test&#13;&#10;n = x.shape[0]&#13;&#10;n_train = int(np.round(n * 0.25))&#13;&#10;&#13;&#10;# First 25% train, remaining test&#13;&#10;x_train = x[:n_train, :]&#13;&#10;y_train = y[:n_train]&#13;&#10;x_test = x[n_train:, :]&#13;&#10;y_test = y[n_train:]"/></node></node><node CREATED="1479984765323" FOLDER="true" ID="7lrnbi1jhl33vg9i9kra0fl9j4" MODIFIED="1479984765323" TEXT="create polynomial X"><node CREATED="1479984765323" ID="3d0in4hv69d0rjnbinm3kisdgu" MODIFIED="1479984765323" TEXT=""/><node CREATED="1479984765323" ID="38dd56cbv2ompr8k2plbl4b0i3" MODIFIED="1479984765323" TEXT=" sklearn import preprocessing"><node CREATED="1479984765323" ID="16ep2kenbkphjkdant6cc6m9qp" MODIFIED="1479984765323" TEXT="quad_features = preprocessing.PolynomialFeatures(degree = 2)&#13;&#10;x_expanded_train = quad_features.fit_transform(x_train)"/></node><node CREATED="1479984765323" ID="1m4e1rbj1b4882829bb70jee29" MODIFIED="1479984765323" TEXT="manual"><node COLOR="#038003" CREATED="1479984765323" ID="3fp904tjn1kjip9f3m4eh0e7qv" MODIFIED="1479984765323" TEXT="def polynomial_basis (x, degree):&#13;&#10;    p = np.arange (1, degree + 1)&#13;&#10;    return x[:, np.newaxis] ** p&#13;&#10;&#13;&#10;x=  np.array([1, 2,3, 4, 5])&#13;&#10;&#13;&#10;print x&#13;&#10;&#13;&#10;print polynomial_basis (x,3)"><font BOLD="true" NAME="SansSerif" SIZE="11"/></node><node CREATED="1479984765323" ID="06ntsrf5tf2lakmhv25ab3pr4l" MODIFIED="1479984765323" TEXT="&lt;html&gt;&lt;img src=&quot;images/2prm1mca1po3sm1uuc8271au8n.png&quot;&gt;"/></node></node></node><node CREATED="1479984765324" ID="62a7nl30pmse3si997dq7a2qfu" MODIFIED="1479984765325" POSITION="left" TEXT="Numpy  vs Pandas"><node CREATED="1479984765325" ID="59rf8jj38qh596cn2c36griase" MODIFIED="1479984765325" TEXT="add numpy array to pandas column"><node CREATED="1479984765325" ID="3er55qajljugo2nka1nkkkcs03" MODIFIED="1479984765325" TEXT="line_pandas = df.copy()&#13;&#10;line_pandas['y'] = pd.Series(predicted_y_numpy, index=df_pandas.index)&#13;&#10;"/></node></node><node CREATED="1479984765325" ID="5hc570vpabh4bo97ncolpnv7fe" MODIFIED="1479984765325" POSITION="left" TEXT="Function"><node CREATED="1479984765325" FOLDER="true" ID="567el16ehbbk2d8v1t04ugkc3l" MODIFIED="1479984765325" TEXT="lambda functions"><node CREATED="1479984765325" ID="7dta73cphd036q77c7gfuc5clf" MODIFIED="1479984765325" TEXT="defining short functions"><node CREATED="1479984765325" ID="0iha9b2mdo7jbk9co5hkqcm7o7" MODIFIED="1479984765325" TEXT="lambda &lt;input&gt;: &lt;do something to input and return&gt;"/><node CREATED="1479984765325" ID="1r5n4s50ki2qgr90dbu0unkd1o" MODIFIED="1479984765325" TEXT="lambda x: x**2"/></node></node><node CREATED="1479984765325" FOLDER="true" ID="5srkt9lmpfstkg84agk45d12js" MODIFIED="1479984765325" TEXT="functions as parameters"><node CREATED="1479984765325" ID="5e1rcri2nf6o2nj3jcbprq2jkk" MODIFIED="1479984765325" TEXT="&lt;html&gt;&lt;img src=&quot;images/7l4f4cnlhrrvp2udq92dipvi3r.png&quot;&gt;"/><node CREATED="1479984765327" ID="4gpa656sllrp6ob2blc0761nkt" MODIFIED="1479984765327" TEXT="you can pass function as a parameter"/><node CREATED="1479984765327" ID="5hgliv0dp6khrfuoqqnav770of" MODIFIED="1479984765327" TEXT="&lt;html&gt;&lt;img src=&quot;images/5d71ftevke0ejsv8f9cbqnsb6d.png&quot;&gt;"/><node CREATED="1479984765328" ID="1t0maplm5puhj272ke6qdt2gjr" MODIFIED="1479984765328" TEXT="import pandas as pd&#13;&#10;series=pd.Series([1,2,3,4])&#13;&#10;series.apply(lamdba x:x+1)"><node CREATED="1479984765328" ID="6kkpq7b9nu9qtp55to1epfcni6" MODIFIED="1479984765328" TEXT="instead of use for loop"/></node></node></node></node></map>